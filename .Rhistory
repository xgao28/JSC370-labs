print(scatterplot)
# Fit linear model
linear_model <- lm(med_temp ~ med_atm_press, data = lazy_table)
# Fit spline model with cubic regression spline on wind speed
spline_model <- gam(med_temp ~ s(med_wind_speed, bs = "cs"), data = lazy_table)
# Summarize linear model
summary(linear_model)
# Summarize spline model
summary(spline_model)
# Plot results from both models
plot(linear_model)
plot(spline_model)
# Interpretation: Compare the R-squared values and AIC/BIC values of both models to determine the best fit.
calculate_distance <- function(lat1, lon1, lat2, lon2) {
distance <- sqrt((lat2 - lat1)^2 + (lon2 - lon1)^2)
return(distance)
}
mere_by_stations <- mere_by_stations %>%
mutate(geo_dist = calculate_distance(lat, lon, state_med_lat, state_med_lon))
# Find the closest station to the geographic midpoint of each state
geo_closest_stations_by_state <- mere_by_stations %>%
group_by(state) %>%
arrange(geo_dist) %>%
slice(1)
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
)
map
calculate_distance <- function(lat1, lon1, lat2, lon2) {
distance <- sqrt((lat2 - lat1)^2 + (lon2 - lon1)^2)
return(distance)
}
mere_by_stations <- mere_by_stations %>%
mutate(geo_dist = calculate_distance(lat, lon, state_med_lat, state_med_lon))
# Find the closest station to the geographic midpoint of each state
geo_closest_stations_by_state <- mere_by_stations %>%
group_by(state) %>%
arrange(geo_dist) %>%
slice(1)
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend()
calculate_distance <- function(lat1, lon1, lat2, lon2) {
distance <- sqrt((lat2 - lat1)^2 + (lon2 - lon1)^2)
return(distance)
}
mere_by_stations <- mere_by_stations %>%
mutate(geo_dist = calculate_distance(lat, lon, state_med_lat, state_med_lon))
# Find the closest station to the geographic midpoint of each state
geo_closest_stations_by_state <- mere_by_stations %>%
group_by(state) %>%
arrange(geo_dist) %>%
slice(1)
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend(colors = "purple")
calculate_distance <- function(lat1, lon1, lat2, lon2) {
distance <- sqrt((lat2 - lat1)^2 + (lon2 - lon1)^2)
return(distance)
}
mere_by_stations <- mere_by_stations %>%
mutate(geo_dist = calculate_distance(lat, lon, state_med_lat, state_med_lon))
# Find the closest station to the geographic midpoint of each state
geo_closest_stations_by_state <- mere_by_stations %>%
group_by(state) %>%
arrange(geo_dist) %>%
slice(1)
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend(colors = ("purple", "orange"), labels = ("geographic closest", "Temp and wind speed closest"))
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend(colors = ("purple""orange"), labels = ("geographic closest", "Temp and wind speed closest"))
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend(colors = c("purple","orange"), labels = c("geographic closest", "Temp and wind speed closest"))
map
map
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend(colors = c("purple","orange"), labels = c("Geographic closest", "Temperature and wind speed closest"))
map
lazy_table <- mere_by_stations %>%
filter(med_atm_press >= 1000 & med_atm_press <= 1020)
scatterplot <- ggplot(lazy_table, aes(x = med_atm_press, y = med_temp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr"), se = FALSE, color = "red") +  # Smooth line with cubic regression spline
labs(x = "Atmospheric Pressure", y = "Temperature") +  # Labels
theme_minimal()
print(scatterplot)
linear_model <- lm(med_temp ~ med_atm_press, data = lazy_table)
spline_model <- gam(med_temp ~ s(med_wind_speed, bs = "cr"), data = lazy_table)
summary(linear_model)
summary(spline_model)
plot(linear_model)
plot(spline_model)
lazy_table <- mere_by_stations %>%
filter(med_atm_press >= 1000 & med_atm_press <= 1020)
scatterplot <- ggplot(lazy_table, aes(x = med_atm_press, y = med_temp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr"), se = FALSE, color = "red") +  # Smooth line with cubic regression spline
labs(x = "Atmospheric Pressure", y = "Temperature") +  # Labels
theme_minimal()
print(scatterplot)
linear_model <- lm(med_temp ~ med_atm_press, data = lazy_table)
spline_model <- gam(med_temp ~ s(med_atm_press, bs = "cr"), data = lazy_table)
summary(linear_model)
summary(spline_model)
plot(linear_model)
plot(spline_model)
webshot::install_phantomjs()
closest_stations %>%
filter(dist > 0.0)
closest_stations %>%
filter(dist == 0.0)
mere_by_stations <- mer_by_stations %>%
merge(mer_by_states) %>%
filter(state == STATE)
mere_by_stations <- mer_by_stations %>%
merge(mer_by_states) %>%
filter(state == STATE)
mutate(dist = temp_windsp_dist(state_temp = state_med_temp,
station_temp = med_temp,
state_wsp = state_med_wind_speed,
station_wsp = med_wind_speed))
mere_by_stations <- mer_by_stations %>%
merge(mer_by_states) %>%
filter(state == STATE) %>%
mutate(dist = temp_windsp_dist(state_temp = state_med_temp,
station_temp = med_temp,
state_wsp = state_med_wind_speed,
station_wsp = med_wind_speed))
# Group by state and find closest station
closest_stations <- mere_by_stations %>%
group_by(state) %>%
top_n(-1, dist) %>%
ungroup()
# Select only necessary columns
closest_stations <- closest_stations %>%
select(USAFID, med_temp, med_wind_speed, state, lat, lon, elev, dist, ) %>%
unique()
closest_stations %>%
filter(dist == 0.0)
geo_distance <- function(lat1, lon1, lat2, lon2) {
distance <- sqrt((lat2 - lat1)^2 + (lon2 - lon1)^2)
return(distance)
}
mere_by_stations <- mere_by_stations %>%
mutate(geo_dist = geo_distance(lat, lon, state_med_lat, state_med_lon))
# Find the closest station to the geographic midpoint of each state
geo_closest_stations_by_state <- mere_by_stations %>%
group_by(state) %>%
arrange(geo_dist) %>%
slice(1)
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend(colors = c("purple","orange"), labels = c("Geographic closest", "Temperature and wind speed closest"))
map
View(met)
View(met)
View(met)
View(met)
View(mer_by_states)
View(mer_by_states)
View(mer)
View(mer)
library(data.table)
library(dtplyr)
library(dplyr)
library(mgcv)
library(ggplot2)
library(leaflet)
library(kableExtra)
library(tidyr)
library(knitr)
library(styler)
library(webshot)
fn <- "https://raw.githubusercontent.com/JSC370/JSC370-2024/main/data/met_all_2023.gz"
if (!file.exists("met_all_2023.gz"))
download.file(fn, destfile = "met_all_2023.gz")
met <- data.table::fread("met_all_2023.gz")
# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]
# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]
# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE, LAT, LON)])
# Dropping NAs
stations <- stations[!is.na(USAF)]
# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
# Read in the met data and fix lat, lon, temp
met$lat <- met$lat/1000
met$lon <- met$lon/1000
met$wind.sp <- met$wind.sp/10
met$temp <- met$temp/10
met$dew.point <- met$dew.point/10
met$atm.press <- met$atm.press/10
mer <- merge(met, stations,
by.x = "USAFID", by.y="USAF",
all.x = TRUE, all.y = FALSE)
# Calculate the median values for temperature, wind speed, and atmospheric pressure
national_median_temp <- quantile(mer$temp, probs = 0.5, na.rm = TRUE)
national_median_wind_speed <- quantile(mer$wind.sp, probs = 0.5, na.rm = TRUE)
national_median_atm_pressure <- quantile(mer$atm.press, probs = 0.5, na.rm = TRUE)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mer_by_stations <- mer %>%
# filter(!is.na(temp) & !is.na(wind.sp) & !is.na(atm.press)) %>%
group_by(USAFID) %>%
summarise(
med_temp = median(temp, na.rm = TRUE),
med_wind_speed = median(wind.sp,na.rm = TRUE),
med_atm_press = median(atm.press,na.rm = TRUE),
state = get_mode(STATE),
lat = median(lat),
lon = median(lon),
elev = median(elev)
)
nrow(mer_by_stations)
# Find stations where these median values occur
stations_median_temp <- unique(mer_by_stations$USAFID[which(mer_by_stations$med_temp == national_median_temp)])
stations_median_wind_speed <- unique(mer_by_stations$USAFID[which(mer_by_stations$med_wind_speed == national_median_wind_speed)])
stations_median_atm_pressure <- unique(mer_by_stations$USAFID[which(mer_by_stations$med_atm_press == national_median_atm_pressure)])
# Output the stations with median values
cat("Stations with median temperature:", stations_median_temp, "\n")
cat("Stations with median wind speed:", stations_median_wind_speed, "\n")
cat("Stations with median atmospheric pressure:", stations_median_atm_pressure, "\n")
common_stations <- Reduce(intersect, list(stations_median_temp, stations_median_wind_speed, stations_median_atm_pressure))
cat("Stations with national median temperature, wind speed, and atmospheric pressure:", common_stations)
temp_windsp_dist <- function(station_temp, state_temp, station_wsp, state_wsp) {
sqrt((state_temp - station_temp)^2+(state_wsp - station_wsp)^2)
}
mer_by_states <- mer %>%
group_by(STATE) %>%
summarise(
state_med_temp = median(temp, na.rm = TRUE),
state_med_wind_speed = median(wind.sp,na.rm = TRUE),
state_med_atm_press = median(atm.press,na.rm = TRUE),
state_med_lat = median(lat),
state_med_lon = median(lon)
)
mer_by_states
mere_by_stations <- mer_by_stations %>%
merge(mer_by_states) %>%
filter(state == STATE) %>%
mutate(dist = temp_windsp_dist(state_temp = state_med_temp,
station_temp = med_temp,
state_wsp = state_med_wind_speed,
station_wsp = med_wind_speed))
# Group by state and find closest station
closest_stations <- mere_by_stations %>%
group_by(state) %>%
top_n(-1, dist) %>%
ungroup()
# Select only necessary columns
closest_stations <- closest_stations %>%
select(USAFID, med_temp, med_wind_speed, state, lat, lon, elev, dist, ) %>%
unique()
closest_stations
geo_distance <- function(lat1, lon1, lat2, lon2) {
distance <- sqrt((lat2 - lat1)^2 + (lon2 - lon1)^2)
return(distance)
}
mere_by_stations <- mere_by_stations %>%
mutate(geo_dist = geo_distance(lat, lon, state_med_lat, state_med_lon))
# Find the closest station to the geographic midpoint of each state
geo_closest_stations_by_state <- mere_by_stations %>%
group_by(state) %>%
arrange(geo_dist) %>%
slice(1)
# Create the leaflet map
map <- leaflet(geo_closest_stations_by_state) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
color = ~"purple",
radius = 5,
#popup = ~paste("USAFID: ", USAFID, "<br>",
#               "Median Temperature: ", med_temp, "<br>",
#               "Median Wind Speed: ", med_wind_speed, "<br>",
#               "State: ", state, "<br>",
#               "Latitude: ", lat, "<br>",
#               "Longitude: ", lon, "<br>",
#               "Elevation: ", elev, "<br>",
#               "Geo distance: ", geo_dist, "<br>")
) %>%
addCircleMarkers(
data = closest_stations,
lng = ~lon,
lat = ~lat,
color = ~"orange",
radius = 2
) %>%
addLegend(colors = c("purple","orange"), labels = c("Geographic closest", "Temperature and wind speed closest"))
map
mer <- mer %>%
mutate(elev_category = case_when(
elev < 93 ~ "Low",
elev >= 93 & elev < 401 ~ "Mid",
elev >= 401 ~ "High"
))
# Calculate average temperature for each elevation category within each state
summary_table <- mer %>%
group_by(STATE, elev_category) %>%
summarise(avg_temp = mean(temp, na.rm = TRUE),.groups = "drop")
# Reshape the data to have elevation categories as columns
summary_table <- spread(summary_table, key = elev_category, value = avg_temp)
# Add row names for better readability
rownames(summary_table) <- summary_table$STATE
# Print the summary table using kable
kable(summary_table, caption = "average temperature by low, median, and high elevation stations", format = "pipe") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
lazy_table <- mere_by_stations %>%
filter(med_atm_press >= 1000 & med_atm_press <= 1020)
scatterplot <- ggplot(lazy_table, aes(x = med_atm_press, y = med_temp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr"), se = FALSE, color = "red") +  # Smooth line with cubic regression spline
labs(x = "Atmospheric Pressure", y = "Temperature") +  # Labels
theme_minimal()
print(scatterplot)
linear_model <- lm(med_temp ~ med_atm_press, data = lazy_table)
spline_model <- gam(med_temp ~ s(med_atm_press, bs = "cr"), data = lazy_table)
summary(linear_model)
summary(spline_model)
plot(linear_model)
plot(spline_model)
